<?php

namespace app\controllers;

use function alias;
use const null;
use function print_r;
use function transliterate;
use Yii;
use const SORT_DESC;
use yii\data\Pagination;
use yii\filters\AccessControl;
use yii\helpers\Html;
use yii\helpers\Url;
use yii\web\Controller;
use yii\filters\VerbFilter;
use app\models\Article;
use app\models\Category;
use app\models\SignupForm;
use app\models\LoginForm;

class SiteController extends Controller
{
    public function beforeAction($action)
    {
        $categories = [];
        $element_number = 0;
        foreach (Category::find()->asArray()->limit(6)->all() as $key => $category) {
            if ($key != 0 && $key % 3 == 0) {
                ++$element_number;
            }
            $categories[$element_number][] = $category;
        }
        $this->view->params['category'] = $categories;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['logout'],
                'rules' => [
                    [
                        'actions' => ['logout'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'logout' => ['post'],
                ],
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }

    public function actionIndex($search = null)
    {
        if (!$search) {
            $query = Article::find()->orderBy(['id' => SORT_DESC]);
        } else {
            $search = Html::encode($search);
            $query = Article::find()->orderBy(['id' => SORT_DESC])
                ->where(['like', 'title', $search])
                ->orWhere(['like', 'description', $search])
                ->orWhere(['like', 'content', $search]);
        }
        $countQuery = clone $query;
        $pages = new Pagination([
            'totalCount' => $countQuery->count(),
            'pageSize' => 1,
            'pageSizeParam' => false
        ]);
        $models = $query->offset($pages->offset)
            ->limit($pages->limit)
            ->all();


        return $this->render('index', [
            'models' => $models,
            'pages' => $pages,
            'search' => $search
        ]);
    }

    public function actionSignIn()
    {
        $model = new LoginForm();
        if ($model->load(Yii::$app->request->post()))  {
            if ($model->login()) {
                $this->refresh();
                return $this->redirect(Url::toRoute('site/index'));
            }
        }
        return $this->render('signin', ['model' => $model]);
    }

    public function actionSignUp()
    {
        $model = new SignupForm();

        if ($model->load(Yii::$app->request->post())) {
            if ($user = $model->signup()) {
                if (Yii::$app->getUser()->login($user)) {
                    return $this->goHome();
                }
            }
        }

        return $this->render('signup', [
            'model' => $model,
        ]);
    }

    public function actionLogout()
    {
        Yii::$app->user->logout();
        return $this->goHome();
    }

    public function actionTest()
    {
        print_r(alias('Пиво с gренкой', '_'));
    }
}

<?php

namespace app\controllers;

use function print_r;
use function var_dump;
use Yii;
use const null;
use const false;
use const SORT_DESC;
use function is_bool;
use function compact;
use function json_encode;
use function array_search;
use app\models\LoginForm;
use app\models\SignupForm;
use app\models\Category;
use app\models\Article;
use app\models\Comment;
use app\models\Like;
use yii\data\Pagination;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\helpers\Html;
use yii\helpers\Url;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;

class SiteController extends Controller
{
    public function beforeAction($action)
    {
        $this->openSession();
        if (!isset($_SESSION['article']['likes'])) {
            foreach (Like::find()->asArray()->all() as $like) {
                $_SESSION[$like['object_type']]['likes'][$like['object_id']][] = $like['user_id'];
            }
        }
        if (!isset($_SESSION['article']['views'])) {
            $_SESSION['article']['views'] = [];
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::class,
                'only' => ['logout', 'like'],
                'rules' => [
                    [
                        'actions' => ['logout', 'like'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::class,
                'actions' => [
                    'logout' => ['post'],
                ],
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }

    public function actionIndex($search = null)
    {
        if (!$search) {
            $query = Article::find()->orderBy(['id' => SORT_DESC]);
            $this->view->title = 'Blog';
        } else {
            $search = Html::encode($search);
            $this->view->title = 'Search | ' . $search;
            $query = Article::find()->orderBy(['id' => SORT_DESC])
                ->where(['like', 'title', $search])
                ->orWhere(['like', 'description', $search])
                ->orWhere(['like', 'content', $search]);
        }
        $countQuery = clone $query;
        $pages = new Pagination([
            'totalCount' => $countQuery->count(),
            'pageSize' => 3,
            'pageSizeParam' => false
        ]);
        $models = $query->offset($pages->offset)
            ->limit($pages->limit)
            ->all();


        return $this->render('index', [
            'models' => $models,
            'pages' => $pages,
            'search' => $search
        ]);
    }

    public function actionSignIn()
    {
        $model = new LoginForm();
        if ($model->load(Yii::$app->request->post()))  {
            if ($model->login()) {
                $this->refresh();
                return $this->redirect(Url::home());
            }
        }
        return $this->render('signin', ['model' => $model]);
    }

    public function actionSignUp()
    {
        $model = new SignupForm();
        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            try{
                $user = $model->signup();
                if (Yii::$app->user->login($user)) {
                    return $this->goHome();
                }
            } catch (\RuntimeException $e){
                Yii::$app->errorHandler->logException($e);
                Yii::$app->session->setFlash('error', $e->getMessage());
            }
        }

        return $this->render('signup', [
            'model' => $model,
        ]);
    }

    public function actionLogout()
    {
        Yii::$app->user->logout();
        return $this->goHome();
    }
    
    public function actionView($alias)
    {
        $model = Article::findOne(['alias' => $alias]);
        if (!$model) {
            throw new NotFoundHttpException('Article not found');
        }

        $this->openSession();
        $key = array_search($model->id, $_SESSION['article']['views']);
        if (is_bool($key)) {
            $_SESSION['article']['views'][] = $model->id;
            $model->review();
        }

        $comment = new Comment();
        if (!Yii::$app->user->isGuest && $comment->load(Yii::$app->request->post()) && $comment->validate()) {
            $model->addComment($comment);
            $this->refresh();
            return $this->redirect(['site/view', 'alias' => $alias, 'model' => $model]);
        }

        $this->view->title = $model->title;
        $query = Comment::find()
            ->where(['article_id' => $model->id, 'status' => Comment::STATUS_PUBLISHED])
            ->orderBy(['created_at' => SORT_DESC])
            ->with('user')
            ->asArray();
        $countQuery = clone $query;
        $pages = new Pagination([
            'totalCount' => $countQuery->count(),
            'pageSize' => 2,
            'pageSizeParam' => false
        ]);
        $comments = $query->offset($pages->offset)
            ->limit($pages->limit)
            ->all();
        return $this->render('view', compact('model', 'comment', 'comments', 'pages'));
    }

    public function actionLike()
    {
        if (!Yii::$app->user->isGuest) {
            if (Yii::$app->request->isAjax) {
                $id = Yii::$app->request->post('id');
                $article = Article::findOne($id);
                if (!$article) {
                    throw new NotFoundHttpException('Article not found');
                }
                $user_id = Yii::$app->user->id;
                $like = Like::find()
                    ->where(['object_id' => $id, 'user_id' => $user_id, 'object_type' => 'article'])
                    ->limit(1)
                    ->one();

                $this->openSession();

                if (!$like) {
                    $article->addLike(new Like([
                        'object_id' => $article->id,
                        'object_type' => 'article',
                        'user_id' => $user_id
                    ]));
                    $action = 'like';
                    $_SESSION['article']['likes'][$article->id][] = $user_id;
                } else {
                    $article->removeLike($like);
                    $action = 'unlike';
                    $key = array_search($user_id, $_SESSION['article']['likes'][$article->id]);
                    if (!is_bool($key)) {
                        unset($_SESSION['article']['likes'][$article->id][$key]);
                    }
                }
                return json_encode([
                    'action' => $action,
                    'like_count' => $article->likes_count
                ]);
            }
        } else {
            return json_encode([
                'message' => 'Please, login for this action.'
            ]);
        }
    }

    private function openSession()
    {
        $session = Yii::$app->session;
        if (!$session->isActive) {
            $session->open();
        }
    }
}
